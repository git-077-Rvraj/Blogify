{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rv raj\\\\Desktop\\\\Blogify\\\\frontend\\\\src\\\\components\\\\Login.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport GoogleLogin from \"react-google-login\";\ndotenv.config();\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nclass Login extends React.Component {\n  //After logging in, redirect to previous page\n  componentDidMount() {\n    if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\n      window.history.back();\n    }\n  } // Google login success callback\n\n\n  successGoogleLogin(response) {\n    // Create an instance of the user\n    const user = {\n      username: response.profileObj.name,\n      socialId: response.googleId\n    }; // Make an API call to either findOrCreate the user\n\n    axios.post(`${baseURL}/auth/login`, user).then(res => {\n      // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\n      let count = 0; // If the response has a valid social Id\n\n      if (res.data.socialId === response.googleId) {\n        // Set the username and isLoggedIn in the session storage\n        sessionStorage.setItem(\"isLoggedIn\", \"true\");\n        sessionStorage.setItem(\"username\", res.data.username);\n        count++; // Remove the user session cookie after 24 hours, to log the user out.\n        // This is for cases when the user doesn't end the session or doesn't logout\n\n        window.setTimeout(() => {\n          sessionStorage.removeItem(\"isLoggedIn\");\n          sessionStorage.removeItem(\"username\");\n        }, 24 * 60 * 60 * 60); // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\n\n        if (count === 1) {\n          window.location.reload();\n        }\n      } // If user data returned is invalid, then redirect to the login page once again\n      else {\n          window.location = \"/login\";\n        }\n    }).catch(err => console.error(err));\n  } // Google login failure callback\n\n\n  failureGoogleLogin(response) {\n    console.error(response);\n    window.location = \"/login\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, \"Login with your social account\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"full-stop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, \".\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"gold-hr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: \"700090115249-lcjkf4pq37jhc86v3ab59md945l9o0lu.apps.googleusercontent.com\",\n      buttonText: \"Log in With Google\",\n      onSuccess: this.successGoogleLogin,\n      onFailure: this.failureGoogleLogin,\n      cookiePolicy: \"single_host_origin\",\n      scope: \"profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/Rv raj/Desktop/Blogify/frontend/src/components/Login.js"],"names":["React","axios","dotenv","GoogleLogin","config","baseURL","process","env","REACT_APP_BASEURL","Login","Component","componentDidMount","sessionStorage","getItem","window","history","back","successGoogleLogin","response","user","username","profileObj","name","socialId","googleId","post","then","res","count","data","setItem","setTimeout","removeItem","location","reload","catch","err","console","error","failureGoogleLogin","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\n\nimport GoogleLogin from \"react-google-login\";\n\ndotenv.config();\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nclass Login extends React.Component {\n    //After logging in, redirect to previous page\n    componentDidMount() {\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\n            window.history.back();\n        }\n    }\n\n    // Google login success callback\n    successGoogleLogin(response) {\n        // Create an instance of the user\n        const user = {\n            username: response.profileObj.name,\n            socialId: response.googleId,\n        };\n\n        // Make an API call to either findOrCreate the user\n        axios\n            .post(`${baseURL}/auth/login`, user)\n            .then((res) => {\n                // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\n                let count = 0;\n\n                // If the response has a valid social Id\n                if (res.data.socialId === response.googleId) {\n                    // Set the username and isLoggedIn in the session storage\n                    sessionStorage.setItem(\"isLoggedIn\", \"true\");\n                    sessionStorage.setItem(\"username\", res.data.username);\n                    count++;\n\n                    // Remove the user session cookie after 24 hours, to log the user out.\n                    // This is for cases when the user doesn't end the session or doesn't logout\n                    window.setTimeout(() => {\n                        sessionStorage.removeItem(\"isLoggedIn\");\n                        sessionStorage.removeItem(\"username\");\n                    }, 24 * 60 * 60 * 60);\n\n                    // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\n                    if (count === 1) {\n                        window.location.reload();\n                    }\n                }\n                // If user data returned is invalid, then redirect to the login page once again\n                else {\n                    window.location = \"/login\";\n                }\n            })\n            .catch((err) => console.error(err));\n    }\n\n    \n    // Google login failure callback\n    failureGoogleLogin(response) {\n        console.error(response);\n        window.location = \"/login\";\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"login\">\n                    <h5>\n                        Login with your social account\n                        <span className=\"full-stop\">.</span>\n                    </h5>\n                    <hr className=\"gold-hr\" />\n                    <div className=\"google\">\n                        <GoogleLogin\n                            clientId=\"700090115249-lcjkf4pq37jhc86v3ab59md945l9o0lu.apps.googleusercontent.com\"\n                            buttonText=\"Log in With Google\"\n                            onSuccess={this.successGoogleLogin}\n                            onFailure={this.failureGoogleLogin}\n                            cookiePolicy={\"single_host_origin\"}\n                            scope=\"profile\"\n                        />\n                    </div>\n                    <br />\n                 \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}